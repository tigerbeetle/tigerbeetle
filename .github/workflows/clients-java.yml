# This workflow will build a package using Maven and then publish it to Maven Central when a release is created

name: "clients/java"

on:
  workflow_call:
    secrets:
      MAVEN_GPG_SECRET_KEY:
        required: false
      MAVEN_CENTRAL_USERNAME:
        required: false
      MAVEN_CENTRAL_TOKEN:
        required: false
      MAVEN_GPG_SECRET_KEY_PASSWORD:
        required: false
    inputs:
      version:
        required: false
        type: string

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_CENTRAL_TOKEN
        gpg-private-key: ${{ secrets.MAVEN_GPG_SECRET_KEY }}
        gpg-passphrase: MAVEN_GPG_PASSPHRASE
        settings-path: ${{ github.workspace }}

    - name: Format linter
      working-directory: src/clients/java
      run: mvn -B formatter:validate --file pom.xml

    - name: Install Zig
      working-directory: src/clients/java
      run: ./scripts/install.sh

    - name: Build
      working-directory: src/clients/java
      run: mvn -B package --file pom.xml

    - name: Save local package
      uses: actions/upload-artifact@v3
      with:
        name: jar-artifact-${{ inputs.version }}
        path: |
          src/clients/java/target/*.jar
          !src/clients/java/target/*javadoc.jar
          !src/clients/java/target/*sources.jar

    - name: Publish to the Maven Central Repository
      if: inputs.version != ''
      working-directory: src/clients/java
      run: |
        mvn -B versions:set -DnewVersion=${{ inputs.version }} --file pom.xml
        mvn -B clean deploy -Dmaven.test.skip --file pom.xml -s $GITHUB_WORKSPACE/settings.xml
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_SECRET_KEY_PASSWORD }}

  prepare_validation_tests:
    if: inputs.version == ''
    needs: build_and_publish
    runs-on: ubuntu-latest
    name: Prepare validation tests

    steps:
    - uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    - name: Restore local package
      uses: actions/download-artifact@v3
      with:
        name: jar-artifact-${{ inputs.version }}
        path: test/

    - name: Create a simple test program
      run: |
        mkdir -p test
        cat <<"EOF" > test/Main.java
        import com.tigerbeetle.Client;
        public class Main {
            public static void main(String[] args) {
                try (Client client = new Client(0, new String[] { "3000"})) {
                    client.close();
                    System.out.println("Success");
                    System.exit(0);
                } catch (Exception exception) {
                    exception.printStackTrace();
                    System.exit(-1);
                }
            }
        }
        EOF
    - uses: actions/upload-artifact@v3
      with:
        name: test-artifact
        path: test/*.*

  run_validation_tests:
    if: inputs.version == ''
    needs: prepare_validation_tests
    name: Validate on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
    - uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    - uses: actions/download-artifact@v3
      with:
        name: test-artifact
        path: test/

    - name: Run validation
      run: |
        cd test
        java -cp "./*" Main.java

  run_validation_tests_on_containers:
    if: inputs.version == ''
    needs: prepare_validation_tests
    runs-on: ubuntu-latest
    name: Validate on ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        image:
          - openjdk:20-oracle
          - openjdk:17-bullseye
          - openjdk:17-alpine
          - eclipse-temurin:19-alpine
          - eclipse-temurin:19
          - azul/zulu-openjdk:19
          - azul/zulu-openjdk-alpine:19
          - azul/zulu-openjdk-centos:19
          - azul/zulu-openjdk-debian:19
          - amazoncorretto:17
          - amazoncorretto:17-alpine
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: test-artifact
        path: ./test

    - name: Run validation
      run: |
        docker run -v $(pwd)/test:/test -w /test ${{ matrix.image }} java -cp "./*" Main.java

  samples_integration_test:
    timeout-minutes: 30

    if: inputs.version == ''
    needs: build_and_publish

    # We use self hosted runners for M1 here. See macos.yml for an explaination
    permissions:
      contents: read

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest, [self-hosted, ARM64, macos-12.6], [self-hosted, ARM64, macos-13.2]]
        sample: [basic, two-phase]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    - name: Download jar
      uses: actions/download-artifact@v3
      with:
        name: jar-artifact-${{ inputs.version }}
        path: src/clients/java/target/

    # Grab Zig
    - run: ./scripts/install_zig.${{ matrix.os == 'windows-latest' && 'bat' || 'sh' }}

    # Although Maven is supposed to be installed in the
    # actions/setup-java@v3 step, it wasn't available in at least the
    # self-hosted mac runner. So we grab it manually.

    # Grab Maven
    - run: curl -o maven.zip https://archive.apache.org/dist/maven/maven-3/3.9.3/binaries/apache-maven-3.9.3-bin.zip
    - run: unzip maven.zip

    # Set up Maven PATH.
    - if: matrix.os != 'windows-latest'
      run: echo "$(pwd)/apache-maven-3.9.3/bin" >> $GITHUB_PATH
    - if: matrix.os == 'windows-latest'
      run: echo "$(pwd)/apache-maven-3.9.3/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    # Run the tests
    - run: ./scripts/build.${{ matrix.os == 'windows-latest' && 'bat' || 'sh' }} client_integration
    - run: ./zig-out/bin/client_integration${{ matrix.os == 'windows-latest' && '.exe' || '' }} --language java --sample ${{ matrix.sample }}

  docs:
    timeout-minutes: 30

    if: inputs.version == ''

    # We use self hosted runners for M1 here. See macos.yml for an explaination
    permissions:
      contents: read

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest, [self-hosted, ARM64, macos-12.6], [self-hosted, ARM64, macos-13.2]]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    # Grab Zig
    - run: ./scripts/install_zig.${{ matrix.os == 'windows-latest' && 'bat' || 'sh' }}

    # Although Maven is supposed to be installed in the
    # actions/setup-java@v3 step, it wasn't available in at least the
    # self-hosted mac runner. So we grab it manually.

    # Grab Maven
    - run: curl -o maven.zip https://archive.apache.org/dist/maven/maven-3/3.9.3/binaries/apache-maven-3.9.3-bin.zip
    - run: unzip maven.zip

    # Set up Maven PATH.
    - if: matrix.os != 'windows-latest'
      run: |
        export PATH="$PATH:$(pwd)/apache-maven-3.9.3/bin"
        ./scripts/build.sh client_docs -- --language java

    - if: matrix.os == 'windows-latest'
      run: |
        $env:PATH += "$(pwd)/apache-maven-3.9.3/bin"
        .\scripts\build.bat client_docs
        .\zig-out\bin\client_docs --language java

    - if: matrix.os == 'ubuntu-latest'
      run: ./scripts/fail_on_diff.sh

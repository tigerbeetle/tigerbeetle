name: Docker CI

on:
  # Run CI against any commits pushed to 'main'.
  push:
    branches:
      - 'main'
  # Run CI for any PRs that target 'main' when they are opened or updated.
  pull_request:
    branches:
      - 'main'
    types:
      - opened
      - synchronize

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate_docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/validate_docs.sh

  shellcheck_scripts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/shellcheck.sh

  test_format:
    name: Run zig fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: ./zig/zig fmt . --check

  test_on_linux:
    name: Run tests on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        # Short script but encapsulates the docker command to make it easier to run/debug locally
      - run: ./scripts/tests_on_ubuntu.sh

  test_on_alpine:
    name: Run tests on Alpine
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        # Short script but encapsulates the docker command to make it easier to run/debug locally
      - run: ./scripts/tests_on_alpine.sh

  test_on_macos:
    name: Run tests on macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build test
      - run: ./scripts/install.sh

  fuzz_lsm_manifest_log:
    name: 'Fuzz LSM ManifestLog'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build fuzz_lsm_manifest_log -- --seed 123

  fuzz_lsm_segmented_array:
    name: 'Fuzz LSM SegmentedArray'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build fuzz_lsm_segmented_array -- --seed 123

  fuzz_vsr_superblock:
    name: 'Fuzz VSR SuperBlock'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build fuzz_vsr_superblock -- --seed 123

  fuzz_vsr_superblock_quorums:
    name: 'Fuzz VSR SuperBlock Quorums'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build fuzz_vsr_superblock_quorums -- --seed 123

  # This is just a canary to make sure that the simulator compiles
  # (and passes for at least a single seed).
  simulator:
    name: 'Simulator canary'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig run -OReleaseSafe src/simulator.zig -- 123

  # Verify that these build without errors:
  build-tools:
    name: 'Verify build'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build tb_client
      - run: zig/zig build build_benchmark_ewah
      - run: zig/zig build build_benchmark_eytzinger
      - run: zig/zig build build_benchmark_segmented_array

  build-and-push:
    name: 'Build and push Docker image'
    runs-on: ubuntu-latest
    needs: [test_on_linux, test_on_macos]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build_release
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: release
          platforms: linux/amd64,linux/arm64

      # Validate the image
      - if: github.event_name != 'pull_request'
        uses: actions/checkout@v2
      - if: github.event_name != 'pull_request'
        run: ./scripts/confirm_image.sh ghcr.io/${{ env.IMAGE_NAME }}@${{ steps.docker_build_release.outputs.imageid }} --want-production

  build-and-push-debug:
    runs-on: ubuntu-latest
    needs: [test_on_linux, test_on_macos]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        id: docker_build_debug
        with:
          build-args: |
            DEBUG=true
          tags: ghcr.io/${{ env.IMAGE_NAME }}:debug
          labels: ${{ steps.meta.outputs.labels }}
          target: release
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64


      # Validate the image
      - if: github.event_name != 'pull_request'
        uses: actions/checkout@v2
      - if: github.event_name != 'pull_request'
        run: ./scripts/confirm_image.sh ghcr.io/${{ env.IMAGE_NAME }}@${{ steps.docker_build_debug.outputs.imageid }} --want-debug

  # Keep this around because Github CI looks for this job of this name.
  test:
    runs-on: ubuntu-latest
    needs: [test_format, test_on_linux]
    steps:
      - run: echo "done"

//////////////////////////////////////////////////////////
// This file was auto-generated by java_bindings.zig
// Do not manually modify.
//////////////////////////////////////////////////////////

package com.tigerbeetle;

import java.nio.ByteBuffer;

public final class AccountBatch extends Batch {

    interface Struct {
        int SIZE = 128;

        int Id = 0;
        int UserData = 16;
        int Reserved = 32;
        int Ledger = 80;
        int Code = 84;
        int Flags = 86;
        int DebitsPending = 88;
        int DebitsPosted = 96;
        int CreditsPending = 104;
        int CreditsPosted = 112;
        int Timestamp = 120;
    }

    static final AccountBatch EMPTY = new AccountBatch(0);

    /**
     * Creates an empty batch with the desired maximum capacity.
     * <p>
     * Once created, an instance cannot be resized, however it may contain any number of elements
     * between zero and its {@link #getCapacity capacity}.
     *
     * @param capacity the maximum capacity.
     * @throws IllegalArgumentException if capacity is negative.
     */
    public AccountBatch(final int capacity) {
        super(capacity, Struct.SIZE);
    }

    AccountBatch(final ByteBuffer buffer) {
        super(buffer, Struct.SIZE);
    }

    /**
     * @return an array of 16 bytes representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#id">id</a>
     */
    public byte[] getId() {
        return getUInt128(at(Struct.Id));
    }

    /**
     * @param part a {@link UInt128} enum indicating which part of the 128-bit value is to be retrieved.
     * @return a {@code long} representing the the first 8 bytes of the 128-bit value if
     *         {@link UInt128#LeastSignificant} is informed, or the last 8 bytes if
     *         {@link UInt128#MostSignificant}.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#id">id</a>
     */
    public long getId(final UInt128 part) {
        return getUInt128(at(Struct.Id), part);
    }

    /**
     * @param id an array of 16 bytes representing the 128-bit value.
     * @throws IllegalArgumentException if {@code id} is not 16 bytes long.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#id">id</a>
     */
    public void setId(final byte[] id) {
        putUInt128(at(Struct.Id), id);
    }

    /**
     * @param leastSignificant a {@code long} representing the the first 8 bytes of the 128-bit value.
     * @param mostSignificant a {@code long} representing the the last 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#id">id</a>
     */
    public void setId(final long leastSignificant, final long mostSignificant) {
        putUInt128(at(Struct.Id), leastSignificant, mostSignificant);
    }

    /**
     * @return an array of 16 bytes representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#user_data">user_data</a>
     */
    public byte[] getUserData() {
        return getUInt128(at(Struct.UserData));
    }

    /**
     * @param part a {@link UInt128} enum indicating which part of the 128-bit value is to be retrieved.
     * @return a {@code long} representing the the first 8 bytes of the 128-bit value if
     *         {@link UInt128#LeastSignificant} is informed, or the last 8 bytes if
     *         {@link UInt128#MostSignificant}.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#user_data">user_data</a>
     */
    public long getUserData(final UInt128 part) {
        return getUInt128(at(Struct.UserData), part);
    }

    /**
     * @param userData an array of 16 bytes representing the 128-bit value.
     * @throws IllegalArgumentException if {@code userData} is not 16 bytes long.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#user_data">user_data</a>
     */
    public void setUserData(final byte[] userData) {
        putUInt128(at(Struct.UserData), userData);
    }

    /**
     * @param leastSignificant a {@code long} representing the the first 8 bytes of the 128-bit value.
     * @param mostSignificant a {@code long} representing the the last 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#user_data">user_data</a>
     */
    public void setUserData(final long leastSignificant, final long mostSignificant) {
        putUInt128(at(Struct.UserData), leastSignificant, mostSignificant);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#reserved">reserved</a>
     */
    byte[] getReserved() {
        return getArray(at(Struct.Reserved), 48);
    }

    /**
     * @param reserved
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#reserved">reserved</a>
     */
    void setReserved(byte[] reserved) {
        if (reserved == null)
            reserved = new byte[48];
        if (reserved.length != 48)
            throw new IllegalArgumentException("Reserved must be 48 bytes long");
        putArray(at(Struct.Reserved), reserved);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#ledger">ledger</a>
     */
    public int getLedger() {
        final var value = getUInt32(at(Struct.Ledger));
        return value;
    }

    /**
     * @param ledger
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#ledger">ledger</a>
     */
    public void setLedger(final int ledger) {
        putUInt32(at(Struct.Ledger), ledger);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#code">code</a>
     */
    public int getCode() {
        final var value = getUInt16(at(Struct.Code));
        return value;
    }

    /**
     * @param code
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#code">code</a>
     */
    public void setCode(final int code) {
        putUInt16(at(Struct.Code), code);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#flags">flags</a>
     */
    public int getFlags() {
        final var value = getUInt16(at(Struct.Flags));
        return value;
    }

    /**
     * @param flags
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#flags">flags</a>
     */
    public void setFlags(final int flags) {
        putUInt16(at(Struct.Flags), flags);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#debits_pending">debits_pending</a>
     */
    public long getDebitsPending() {
        final var value = getUInt64(at(Struct.DebitsPending));
        return value;
    }

    /**
     * @param debitsPending
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#debits_pending">debits_pending</a>
     */
    void setDebitsPending(final long debitsPending) {
        putUInt64(at(Struct.DebitsPending), debitsPending);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#debits_posted">debits_posted</a>
     */
    public long getDebitsPosted() {
        final var value = getUInt64(at(Struct.DebitsPosted));
        return value;
    }

    /**
     * @param debitsPosted
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#debits_posted">debits_posted</a>
     */
    void setDebitsPosted(final long debitsPosted) {
        putUInt64(at(Struct.DebitsPosted), debitsPosted);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#credits_pending">credits_pending</a>
     */
    public long getCreditsPending() {
        final var value = getUInt64(at(Struct.CreditsPending));
        return value;
    }

    /**
     * @param creditsPending
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#credits_pending">credits_pending</a>
     */
    void setCreditsPending(final long creditsPending) {
        putUInt64(at(Struct.CreditsPending), creditsPending);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#credits_posted">credits_posted</a>
     */
    public long getCreditsPosted() {
        final var value = getUInt64(at(Struct.CreditsPosted));
        return value;
    }

    /**
     * @param creditsPosted
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#credits_posted">credits_posted</a>
     */
    void setCreditsPosted(final long creditsPosted) {
        putUInt64(at(Struct.CreditsPosted), creditsPosted);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#timestamp">timestamp</a>
     */
    public long getTimestamp() {
        final var value = getUInt64(at(Struct.Timestamp));
        return value;
    }

    /**
     * @param timestamp
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/accounts/#timestamp">timestamp</a>
     */
    void setTimestamp(final long timestamp) {
        putUInt64(at(Struct.Timestamp), timestamp);
    }

}


# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: "clients/java: Build"

on:
  push:
    branches: [ main ]
    # paths:
    #   - src/clients/java/**
  pull_request:
    branches: [ main ]
    paths:
      - src/clients/java/**

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    - name: Format linter
      working-directory: src/clients/java
      run: mvn -B formatter:validate --file pom.xml

    - name: Install Zig
      working-directory: src/clients/java
      run: |
        git submodule init
        git submodule update
        ./scripts/install.sh

    - name: Example programs
      working-directory: src/clients/java/examples
      run: mvn compile

    - name: Build
      if: ${{ github.event_name == 'pull_request' }}
      working-directory: src/clients/java
      run: mvn -B package --file pom.xml

    - name: Save local package
      uses: actions/upload-artifact@v3
      if: ${{ github.event_name == 'pull_request' }}
      with:
        name: jar-artifact
        path: |
          src/clients/java/target/*.jar
          !src/clients/java/target/*javadoc.jar

    - name: Build and publish
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      working-directory: src/clients/java
      run: mvn -B deploy --file pom.xml -s $GITHUB_WORKSPACE/settings.xml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prepare_validation_tests:
    needs: build
    runs-on: ubuntu-latest
    name: Prepare validation tests
    
    steps:
    - uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    ## If it's a pull request, the package wasn't uploaded, so we use a local version:
    - name: Restore local package
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/download-artifact@v3
      with:
        name: jar-artifact
        path: test/

    ## If it's a push, we can download the package from Maven's registry:
    - if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      uses: whelk-io/maven-settings-xml-action@v4
      with:
        repositories: '[{ "id": "github", "url": "https://maven.pkg.github.com/tigerbeetledb/tigerbeetle", "snapshots": { "enabled": "true" } }]'
        servers: '[{ "id": "github", "username": "${{github.actor}}", "password": "${{ github.token }}" }]'
    - name: Download tigerbeetle-java package
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      run: |
        mvn dependency:copy -Dartifact=com.tigerbeetle:tigerbeetle-java:0.0.1-SNAPSHOT -DoutputDirectory=. -DrepositoryId=github
        mkdir -p test
        mv *.jar test/
   
    - name: Create a simple test program
      run: |
        mkdir -p test
        cat <<"EOF" > test/Main.java
        import com.tigerbeetle.Client;
        public class Main {
            public static void main(String[] args) {
                try (Client client = new Client(0, new String[] { "3000"})) {
                    client.close();
                    System.out.println("Success");
                    System.exit(0);
                } catch (Exception exception) {
                    exception.printStackTrace();
                    System.exit(-1);
                }
            }
        }
        EOF

    - uses: actions/upload-artifact@v3
      with:
        name: test-artifact
        path: test/*.*

  run_validation_tests:
    needs: prepare_validation_tests
    name: Validate on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        
    steps:
    - uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github
        settings-path: ${{ github.workspace }}

    - uses: actions/download-artifact@v3
      with:
        name: test-artifact
        path: test/

    - name: Run validation
      run: |
        cd test
        java -cp "./*" Main.java

  run_validation_tests_on_containers:
    needs: prepare_validation_tests
    runs-on: ubuntu-latest
    name: Validate on ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        image:
          - openjdk:20-oracle
          - openjdk:17-bullseye
          - openjdk:17-alpine
          - eclipse-temurin:19-alpine
          - eclipse-temurin:19
          - azul/zulu-openjdk:19
          - azul/zulu-openjdk-alpine:19
          - azul/zulu-openjdk-centos:19
          - azul/zulu-openjdk-debian:19
          - amazoncorretto:17
          - amazoncorretto:17-alpine 
    steps:    
    - uses: actions/download-artifact@v3
      with:
        name: test-artifact
        path: ./test

    - name: Run validation
      run: |
        docker run -v $(pwd)/test:/test -w /test ${{ matrix.image }} java -cp "./*" Main.java

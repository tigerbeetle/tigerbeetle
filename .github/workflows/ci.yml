name: CI
permissions: {}

concurrency:
  group: core-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

on:
  merge_group:
  pull_request:
  push:
    branches: ["main"]

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: shellcheck ./zig/download.sh
      - run: ./zig/download.ps1 && ./zig/zig build ci -- smoke

  test:
    strategy:
      matrix:
        include:
          - { os: 'ubuntu-latest' }
          - { os: 'ubuntu-latest-arm64' }
          - { os: 'windows-latest' }
          - { os: 'macos-latest' }
          - { os: 'macos-13' }
    runs-on: ${{ matrix.os }}
    steps:
      - run: git config --global core.autocrlf false
      - if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-latest-arm64'
        run: | # Allow unshare for vortex.
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_unconfined=0
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0
      - uses: actions/checkout@v4
        with: { fetch-depth: 2147483647 } # Fetch full history for tidy.
      - run: ./zig/download.ps1 && ./zig/zig build ci -- test

  test_aof:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2147483647 }
      - run: ./zig/download.ps1 && ./zig/zig build ci -- aof

  clients:
    strategy:
      matrix:
        include:
          - { os: 'ubuntu-latest',  language: 'dotnet',  language_version: '8.0.x' }
          - { os: 'ubuntu-latest',  language: 'go',      language_version: '1.21'  }
          - { os: 'ubuntu-latest',  language: 'java',    language_version: '11'    }
          - { os: 'ubuntu-latest',  language: 'java',    language_version: '21'    }
          - { os: 'ubuntu-latest',  language: 'node',    language_version: '18.x'  }
          - { os: 'ubuntu-latest',  language: 'node',    language_version: '20.x'  }

          # Support Python 3.7 explicitly, even though it's EOL.
          - { os: 'ubuntu-22.04',  language: 'python',  language_version: '3.7'    }
          - { os: 'ubuntu-latest',  language: 'python',  language_version: '3.13'  }

          - { os: 'windows-latest', language: 'dotnet',  language_version: '8.0.x' }
          - { os: 'windows-latest', language: 'go',      language_version: '1.21'  }
          - { os: 'windows-latest', language: 'java',    language_version: '11'    }
          - { os: 'windows-latest', language: 'java',    language_version: '21'    }
          - { os: 'windows-latest', language: 'node',    language_version: '18.x'  }
          - { os: 'windows-latest', language: 'node',    language_version: '20.x'  }
          - { os: 'windows-latest', language: 'python',  language_version: '3.7'  }
          - { os: 'windows-latest', language: 'python',  language_version: '3.13'  }

          # Limited matrix for macOS - runners are concurrency limited.
          - { os: 'macos-latest',   language: 'go',      language_version: '1.21'  }
          - { os: 'macos-latest',   language: 'node',    language_version: '20.x'  }
          - { os: 'macos-latest',   language: 'python',  language_version: '3.13'  }

          - { os: 'macos-13',       language: 'go',      language_version: '1.21'  }
          - { os: 'macos-13',       language: 'node',    language_version: '20.x'  }
          - { os: 'macos-13',       language: 'python',  language_version: '3.13'  }

          # Limited matrix for Ubuntu ARM - runners are paid and we're not sure of the cost yet.
          - { os: 'ubuntu-latest-arm64',  language: 'dotnet',  language_version: '8.0.x' }
          - { os: 'ubuntu-latest-arm64',  language: 'go',      language_version: '1.21'  }
          - { os: 'ubuntu-latest-arm64',  language: 'java',    language_version: '21'    }
          - { os: 'ubuntu-latest-arm64',  language: 'node',    language_version: '20.x'  }
          - { os: 'ubuntu-latest-arm64',  language: 'python',  language_version: '3.13'  }

    runs-on: ${{ matrix.os }}
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v4

      - if: matrix.language == 'dotnet'
        uses: actions/setup-dotnet@v4
        with: { dotnet-version: "${{ matrix.language_version }}" }

      - if: matrix.language == 'go'
        uses: actions/setup-go@v5
        with: { go-version: "${{ matrix.language_version }}" }

      - if: matrix.language == 'java'
        uses: actions/setup-java@v4
        with: { java-version: "${{ matrix.language_version }}", distribution: 'temurin' }

      - if: matrix.language == 'node'
        uses: actions/setup-node@v4
        with: { node-version: "${{ matrix.language_version }}" }

      - if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with: { python-version: "${{ matrix.language_version }}" }
      - if: matrix.language == 'python'
        run: pip install build hatch pytest

      - run: ./zig/download.ps1 && ./zig/zig build ci -- ${{ matrix.language }}

  devhub:
    runs-on: ubuntu-22.04
    environment: ${{ github.ref == 'refs/heads/main' && 'devhub' || '' }}
    permissions:
      pages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 2147483647 }
      - run: sudo apt-get update && sudo apt-get install -y kcov
      - run: ./zig/download.ps1

      # Dummy devhub run - checks that all the devhub tests pass in CI. They are run again, in main
      # once merged. Kcov is skipped to avoid adding to the pipeline time.
      - if: github.ref != 'refs/heads/main'
        run: sudo -E ./zig/zig build ci -- devhub-dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Not providing DEVHUBDB_PAT and NYRKIO_TOKEN stops devhub from uploading its results, but
          # it still runs everything.

      # Run under sudo to enable memory locking for accurate RSS stats.
      - if: github.ref == 'refs/heads/main'
        run: sudo -E ./zig/zig build ci -- devhub
        env:
          DEVHUBDB_PAT: ${{ secrets.DEVHUBDB_PAT }}
          NYRKIO_TOKEN: ${{ secrets.NYRKIO_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with: { path: ./src/devhub }

      - if: github.ref == 'refs/heads/main'
        uses: actions/deploy-pages@v4


  # Work around GitHub considering Skipped jobs success for "Require status checks before merging"
  # See also:
  # https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches#require-status-checks-before-merging
  # https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/troubleshooting-required-status-checks#handling-skipped-but-required-checks
  # https://stackoverflow.com/a/75250293
  core-pipeline:
    if: always() && github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    needs: [smoke, test, test_aof, clients, devhub]
    steps:
      - if: ${{ !(contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) }}
        run: exit 0
      - if: ${{  (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) }}
        run: exit 1

  antithesis:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: antithesis

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2147483647
      - name: Install dependencies
        run: sudo apt-get install -y jq curl
      - uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
      - name: Login to Container Registry
        run: docker login -u "$ANTITHESIS_DOCKER_USER" -p "$ANTITHESIS_DOCKER_PASS" us-central1-docker.pkg.dev
        env:
          ANTITHESIS_DOCKER_USER: ${{ secrets.ANTITHESIS_DOCKER_USER }}
          ANTITHESIS_DOCKER_PASS: ${{ secrets.ANTITHESIS_DOCKER_PASS }}
      - name: Download Zig
        run: ./zig/download.ps1
      - name: Build and push
        run: |
          ./zig/zig build scripts -- antithesis \
            --tag='antithesis-latest' \
            --push --trigger-test \
            --antithesis-user="$ANTITHESIS_USER" --antithesis-password="$ANTITHESIS_PASS"
        env:
          ANTITHESIS_USER: ${{ secrets.ANTITHESIS_USER }}
          ANTITHESIS_PASS: ${{ secrets.ANTITHESIS_PASS }}

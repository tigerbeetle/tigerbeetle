//////////////////////////////////////////////////////////
// This file was auto-generated by java_bindings.zig
// Do not manually modify.
//////////////////////////////////////////////////////////

package com.tigerbeetle;

import java.nio.ByteBuffer;
import java.math.BigInteger;

public final class CreateAndReturnTransferResultBatch extends Batch {


    interface Struct {
        int SIZE = 160;

        int Result = 0;
        int Flags = 4;
        int Timestamp = 8;
        int Amount = 16;
        int DebitAccountDebitsPending = 32;
        int DebitAccountDebitsPosted = 48;
        int DebitAccountCreditsPending = 64;
        int DebitAccountCreditsPosted = 80;
        int CreditAccountDebitsPending = 96;
        int CreditAccountDebitsPosted = 112;
        int CreditAccountCreditsPending = 128;
        int CreditAccountCreditsPosted = 144;
    }

    /**
     * Creates an empty batch with the desired maximum capacity.
     * <p>
     * Once created, an instance cannot be resized, however it may contain any number of elements
     * between zero and its {@link #getCapacity capacity}.
     *
     * @param capacity the maximum capacity.
     * @throws IllegalArgumentException if capacity is negative.
     */
    public CreateAndReturnTransferResultBatch(final int capacity) {
        super(capacity, Struct.SIZE);
    }

    CreateAndReturnTransferResultBatch(final ByteBuffer buffer) {
        super(buffer, Struct.SIZE);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#result">result</a>
     */
    public CreateTransferResult getResult() {
        final var value = getUInt32(at(Struct.Result));
        return CreateTransferResult.fromValue(value);
    }

    /**
     * @param result
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#result">result</a>
     */
    void setResult(final CreateTransferResult result) {
        putUInt32(at(Struct.Result), result.value);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#flags">flags</a>
     */
    public int getFlags() {
        final var value = getUInt32(at(Struct.Flags));
        return value;
    }

    /**
     * @param flags
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#flags">flags</a>
     */
    void setFlags(final int flags) {
        putUInt32(at(Struct.Flags), flags);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#timestamp">timestamp</a>
     */
    public long getTimestamp() {
        final var value = getUInt64(at(Struct.Timestamp));
        return value;
    }

    /**
     * @param timestamp
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#timestamp">timestamp</a>
     */
    void setTimestamp(final long timestamp) {
        putUInt64(at(Struct.Timestamp), timestamp);
    }

    /**
     * @return a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#amount">amount</a>
     */
    public BigInteger getAmount() {
        final var index = at(Struct.Amount);
        return UInt128.asBigInteger(
            getUInt128(index, UInt128.LeastSignificant),
            getUInt128(index, UInt128.MostSignificant));
    }

    /**
     * @param part a {@link UInt128} enum indicating which part of the 128-bit value
              is to be retrieved.
     * @return a {@code long} representing the first 8 bytes of the 128-bit value if
     *         {@link UInt128#LeastSignificant} is informed, or the last 8 bytes if
     *         {@link UInt128#MostSignificant}.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#amount">amount</a>
     */
    public long getAmount(final UInt128 part) {
        return getUInt128(at(Struct.Amount), part);
    }

    /**
     * @param amount a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#amount">amount</a>
     */
    void setAmount(final BigInteger amount) {
        putUInt128(at(Struct.Amount), UInt128.asBytes(amount));
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @param mostSignificant a {@code long} representing the last 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#amount">amount</a>
     */
    void setAmount(final long leastSignificant, final long mostSignificant) {
        putUInt128(at(Struct.Amount), leastSignificant, mostSignificant);
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#amount">amount</a>
     */
    void setAmount(final long leastSignificant) {
        putUInt128(at(Struct.Amount), leastSignificant, 0);
    }

    /**
     * @return a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_debits_pending">debit_account_debits_pending</a>
     */
    public BigInteger getDebitAccountDebitsPending() {
        final var index = at(Struct.DebitAccountDebitsPending);
        return UInt128.asBigInteger(
            getUInt128(index, UInt128.LeastSignificant),
            getUInt128(index, UInt128.MostSignificant));
    }

    /**
     * @param part a {@link UInt128} enum indicating which part of the 128-bit value
              is to be retrieved.
     * @return a {@code long} representing the first 8 bytes of the 128-bit value if
     *         {@link UInt128#LeastSignificant} is informed, or the last 8 bytes if
     *         {@link UInt128#MostSignificant}.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_debits_pending">debit_account_debits_pending</a>
     */
    public long getDebitAccountDebitsPending(final UInt128 part) {
        return getUInt128(at(Struct.DebitAccountDebitsPending), part);
    }

    /**
     * @param debitAccountDebitsPending a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_debits_pending">debit_account_debits_pending</a>
     */
    void setDebitAccountDebitsPending(final BigInteger debitAccountDebitsPending) {
        putUInt128(at(Struct.DebitAccountDebitsPending), UInt128.asBytes(debitAccountDebitsPending));
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @param mostSignificant a {@code long} representing the last 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_debits_pending">debit_account_debits_pending</a>
     */
    void setDebitAccountDebitsPending(final long leastSignificant, final long mostSignificant) {
        putUInt128(at(Struct.DebitAccountDebitsPending), leastSignificant, mostSignificant);
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_debits_pending">debit_account_debits_pending</a>
     */
    void setDebitAccountDebitsPending(final long leastSignificant) {
        putUInt128(at(Struct.DebitAccountDebitsPending), leastSignificant, 0);
    }

    /**
     * @return a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_debits_posted">debit_account_debits_posted</a>
     */
    public BigInteger getDebitAccountDebitsPosted() {
        final var index = at(Struct.DebitAccountDebitsPosted);
        return UInt128.asBigInteger(
            getUInt128(index, UInt128.LeastSignificant),
            getUInt128(index, UInt128.MostSignificant));
    }

    /**
     * @param part a {@link UInt128} enum indicating which part of the 128-bit value
              is to be retrieved.
     * @return a {@code long} representing the first 8 bytes of the 128-bit value if
     *         {@link UInt128#LeastSignificant} is informed, or the last 8 bytes if
     *         {@link UInt128#MostSignificant}.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_debits_posted">debit_account_debits_posted</a>
     */
    public long getDebitAccountDebitsPosted(final UInt128 part) {
        return getUInt128(at(Struct.DebitAccountDebitsPosted), part);
    }

    /**
     * @param debitAccountDebitsPosted a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_debits_posted">debit_account_debits_posted</a>
     */
    void setDebitAccountDebitsPosted(final BigInteger debitAccountDebitsPosted) {
        putUInt128(at(Struct.DebitAccountDebitsPosted), UInt128.asBytes(debitAccountDebitsPosted));
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @param mostSignificant a {@code long} representing the last 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_debits_posted">debit_account_debits_posted</a>
     */
    void setDebitAccountDebitsPosted(final long leastSignificant, final long mostSignificant) {
        putUInt128(at(Struct.DebitAccountDebitsPosted), leastSignificant, mostSignificant);
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_debits_posted">debit_account_debits_posted</a>
     */
    void setDebitAccountDebitsPosted(final long leastSignificant) {
        putUInt128(at(Struct.DebitAccountDebitsPosted), leastSignificant, 0);
    }

    /**
     * @return a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_credits_pending">debit_account_credits_pending</a>
     */
    public BigInteger getDebitAccountCreditsPending() {
        final var index = at(Struct.DebitAccountCreditsPending);
        return UInt128.asBigInteger(
            getUInt128(index, UInt128.LeastSignificant),
            getUInt128(index, UInt128.MostSignificant));
    }

    /**
     * @param part a {@link UInt128} enum indicating which part of the 128-bit value
              is to be retrieved.
     * @return a {@code long} representing the first 8 bytes of the 128-bit value if
     *         {@link UInt128#LeastSignificant} is informed, or the last 8 bytes if
     *         {@link UInt128#MostSignificant}.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_credits_pending">debit_account_credits_pending</a>
     */
    public long getDebitAccountCreditsPending(final UInt128 part) {
        return getUInt128(at(Struct.DebitAccountCreditsPending), part);
    }

    /**
     * @param debitAccountCreditsPending a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_credits_pending">debit_account_credits_pending</a>
     */
    void setDebitAccountCreditsPending(final BigInteger debitAccountCreditsPending) {
        putUInt128(at(Struct.DebitAccountCreditsPending), UInt128.asBytes(debitAccountCreditsPending));
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @param mostSignificant a {@code long} representing the last 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_credits_pending">debit_account_credits_pending</a>
     */
    void setDebitAccountCreditsPending(final long leastSignificant, final long mostSignificant) {
        putUInt128(at(Struct.DebitAccountCreditsPending), leastSignificant, mostSignificant);
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_credits_pending">debit_account_credits_pending</a>
     */
    void setDebitAccountCreditsPending(final long leastSignificant) {
        putUInt128(at(Struct.DebitAccountCreditsPending), leastSignificant, 0);
    }

    /**
     * @return a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_credits_posted">debit_account_credits_posted</a>
     */
    public BigInteger getDebitAccountCreditsPosted() {
        final var index = at(Struct.DebitAccountCreditsPosted);
        return UInt128.asBigInteger(
            getUInt128(index, UInt128.LeastSignificant),
            getUInt128(index, UInt128.MostSignificant));
    }

    /**
     * @param part a {@link UInt128} enum indicating which part of the 128-bit value
              is to be retrieved.
     * @return a {@code long} representing the first 8 bytes of the 128-bit value if
     *         {@link UInt128#LeastSignificant} is informed, or the last 8 bytes if
     *         {@link UInt128#MostSignificant}.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_credits_posted">debit_account_credits_posted</a>
     */
    public long getDebitAccountCreditsPosted(final UInt128 part) {
        return getUInt128(at(Struct.DebitAccountCreditsPosted), part);
    }

    /**
     * @param debitAccountCreditsPosted a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_credits_posted">debit_account_credits_posted</a>
     */
    void setDebitAccountCreditsPosted(final BigInteger debitAccountCreditsPosted) {
        putUInt128(at(Struct.DebitAccountCreditsPosted), UInt128.asBytes(debitAccountCreditsPosted));
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @param mostSignificant a {@code long} representing the last 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_credits_posted">debit_account_credits_posted</a>
     */
    void setDebitAccountCreditsPosted(final long leastSignificant, final long mostSignificant) {
        putUInt128(at(Struct.DebitAccountCreditsPosted), leastSignificant, mostSignificant);
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#debit_account_credits_posted">debit_account_credits_posted</a>
     */
    void setDebitAccountCreditsPosted(final long leastSignificant) {
        putUInt128(at(Struct.DebitAccountCreditsPosted), leastSignificant, 0);
    }

    /**
     * @return a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_debits_pending">credit_account_debits_pending</a>
     */
    public BigInteger getCreditAccountDebitsPending() {
        final var index = at(Struct.CreditAccountDebitsPending);
        return UInt128.asBigInteger(
            getUInt128(index, UInt128.LeastSignificant),
            getUInt128(index, UInt128.MostSignificant));
    }

    /**
     * @param part a {@link UInt128} enum indicating which part of the 128-bit value
              is to be retrieved.
     * @return a {@code long} representing the first 8 bytes of the 128-bit value if
     *         {@link UInt128#LeastSignificant} is informed, or the last 8 bytes if
     *         {@link UInt128#MostSignificant}.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_debits_pending">credit_account_debits_pending</a>
     */
    public long getCreditAccountDebitsPending(final UInt128 part) {
        return getUInt128(at(Struct.CreditAccountDebitsPending), part);
    }

    /**
     * @param creditAccountDebitsPending a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_debits_pending">credit_account_debits_pending</a>
     */
    void setCreditAccountDebitsPending(final BigInteger creditAccountDebitsPending) {
        putUInt128(at(Struct.CreditAccountDebitsPending), UInt128.asBytes(creditAccountDebitsPending));
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @param mostSignificant a {@code long} representing the last 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_debits_pending">credit_account_debits_pending</a>
     */
    void setCreditAccountDebitsPending(final long leastSignificant, final long mostSignificant) {
        putUInt128(at(Struct.CreditAccountDebitsPending), leastSignificant, mostSignificant);
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_debits_pending">credit_account_debits_pending</a>
     */
    void setCreditAccountDebitsPending(final long leastSignificant) {
        putUInt128(at(Struct.CreditAccountDebitsPending), leastSignificant, 0);
    }

    /**
     * @return a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_debits_posted">credit_account_debits_posted</a>
     */
    public BigInteger getCreditAccountDebitsPosted() {
        final var index = at(Struct.CreditAccountDebitsPosted);
        return UInt128.asBigInteger(
            getUInt128(index, UInt128.LeastSignificant),
            getUInt128(index, UInt128.MostSignificant));
    }

    /**
     * @param part a {@link UInt128} enum indicating which part of the 128-bit value
              is to be retrieved.
     * @return a {@code long} representing the first 8 bytes of the 128-bit value if
     *         {@link UInt128#LeastSignificant} is informed, or the last 8 bytes if
     *         {@link UInt128#MostSignificant}.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_debits_posted">credit_account_debits_posted</a>
     */
    public long getCreditAccountDebitsPosted(final UInt128 part) {
        return getUInt128(at(Struct.CreditAccountDebitsPosted), part);
    }

    /**
     * @param creditAccountDebitsPosted a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_debits_posted">credit_account_debits_posted</a>
     */
    void setCreditAccountDebitsPosted(final BigInteger creditAccountDebitsPosted) {
        putUInt128(at(Struct.CreditAccountDebitsPosted), UInt128.asBytes(creditAccountDebitsPosted));
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @param mostSignificant a {@code long} representing the last 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_debits_posted">credit_account_debits_posted</a>
     */
    void setCreditAccountDebitsPosted(final long leastSignificant, final long mostSignificant) {
        putUInt128(at(Struct.CreditAccountDebitsPosted), leastSignificant, mostSignificant);
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_debits_posted">credit_account_debits_posted</a>
     */
    void setCreditAccountDebitsPosted(final long leastSignificant) {
        putUInt128(at(Struct.CreditAccountDebitsPosted), leastSignificant, 0);
    }

    /**
     * @return a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_credits_pending">credit_account_credits_pending</a>
     */
    public BigInteger getCreditAccountCreditsPending() {
        final var index = at(Struct.CreditAccountCreditsPending);
        return UInt128.asBigInteger(
            getUInt128(index, UInt128.LeastSignificant),
            getUInt128(index, UInt128.MostSignificant));
    }

    /**
     * @param part a {@link UInt128} enum indicating which part of the 128-bit value
              is to be retrieved.
     * @return a {@code long} representing the first 8 bytes of the 128-bit value if
     *         {@link UInt128#LeastSignificant} is informed, or the last 8 bytes if
     *         {@link UInt128#MostSignificant}.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_credits_pending">credit_account_credits_pending</a>
     */
    public long getCreditAccountCreditsPending(final UInt128 part) {
        return getUInt128(at(Struct.CreditAccountCreditsPending), part);
    }

    /**
     * @param creditAccountCreditsPending a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_credits_pending">credit_account_credits_pending</a>
     */
    void setCreditAccountCreditsPending(final BigInteger creditAccountCreditsPending) {
        putUInt128(at(Struct.CreditAccountCreditsPending), UInt128.asBytes(creditAccountCreditsPending));
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @param mostSignificant a {@code long} representing the last 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_credits_pending">credit_account_credits_pending</a>
     */
    void setCreditAccountCreditsPending(final long leastSignificant, final long mostSignificant) {
        putUInt128(at(Struct.CreditAccountCreditsPending), leastSignificant, mostSignificant);
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_credits_pending">credit_account_credits_pending</a>
     */
    void setCreditAccountCreditsPending(final long leastSignificant) {
        putUInt128(at(Struct.CreditAccountCreditsPending), leastSignificant, 0);
    }

    /**
     * @return a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_credits_posted">credit_account_credits_posted</a>
     */
    public BigInteger getCreditAccountCreditsPosted() {
        final var index = at(Struct.CreditAccountCreditsPosted);
        return UInt128.asBigInteger(
            getUInt128(index, UInt128.LeastSignificant),
            getUInt128(index, UInt128.MostSignificant));
    }

    /**
     * @param part a {@link UInt128} enum indicating which part of the 128-bit value
              is to be retrieved.
     * @return a {@code long} representing the first 8 bytes of the 128-bit value if
     *         {@link UInt128#LeastSignificant} is informed, or the last 8 bytes if
     *         {@link UInt128#MostSignificant}.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_credits_posted">credit_account_credits_posted</a>
     */
    public long getCreditAccountCreditsPosted(final UInt128 part) {
        return getUInt128(at(Struct.CreditAccountCreditsPosted), part);
    }

    /**
     * @param creditAccountCreditsPosted a {@link java.math.BigInteger} representing the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_credits_posted">credit_account_credits_posted</a>
     */
    void setCreditAccountCreditsPosted(final BigInteger creditAccountCreditsPosted) {
        putUInt128(at(Struct.CreditAccountCreditsPosted), UInt128.asBytes(creditAccountCreditsPosted));
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @param mostSignificant a {@code long} representing the last 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_credits_posted">credit_account_credits_posted</a>
     */
    void setCreditAccountCreditsPosted(final long leastSignificant, final long mostSignificant) {
        putUInt128(at(Struct.CreditAccountCreditsPosted), leastSignificant, mostSignificant);
    }

    /**
     * @param leastSignificant a {@code long} representing the first 8 bytes of the 128-bit value.
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     * @see <a href="https://docs.tigerbeetle.com/reference/requests/create_and_return_transfers#credit_account_credits_posted">credit_account_credits_posted</a>
     */
    void setCreditAccountCreditsPosted(final long leastSignificant) {
        putUInt128(at(Struct.CreditAccountCreditsPosted), leastSignificant, 0);
    }

}


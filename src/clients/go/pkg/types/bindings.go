///////////////////////////////////////////////////////
// This file was auto-generated by go_bindings.zig   //
//              Do not manually modify.              //
///////////////////////////////////////////////////////

package types

/*
#include "../native/tb_client.h"
*/
import "C"
import "strconv"

type AccountFlags struct {
	Linked                     bool
	DebitsMustNotExceedCredits bool
	CreditsMustNotExceedDebits bool
	History                    bool
	Imported                   bool
	Closed                     bool
}

func (f AccountFlags) ToUint16() uint16 {
	var ret uint16 = 0

	if f.Linked {
		ret |= (1 << 0)
	}

	if f.DebitsMustNotExceedCredits {
		ret |= (1 << 1)
	}

	if f.CreditsMustNotExceedDebits {
		ret |= (1 << 2)
	}

	if f.History {
		ret |= (1 << 3)
	}

	if f.Imported {
		ret |= (1 << 4)
	}

	if f.Closed {
		ret |= (1 << 5)
	}

	return ret
}

type TransferFlags struct {
	Linked              bool
	Pending             bool
	PostPendingTransfer bool
	VoidPendingTransfer bool
	BalancingDebit      bool
	BalancingCredit     bool
	ClosingDebit        bool
	ClosingCredit       bool
	Imported            bool
}

func (f TransferFlags) ToUint16() uint16 {
	var ret uint16 = 0

	if f.Linked {
		ret |= (1 << 0)
	}

	if f.Pending {
		ret |= (1 << 1)
	}

	if f.PostPendingTransfer {
		ret |= (1 << 2)
	}

	if f.VoidPendingTransfer {
		ret |= (1 << 3)
	}

	if f.BalancingDebit {
		ret |= (1 << 4)
	}

	if f.BalancingCredit {
		ret |= (1 << 5)
	}

	if f.ClosingDebit {
		ret |= (1 << 6)
	}

	if f.ClosingCredit {
		ret |= (1 << 7)
	}

	if f.Imported {
		ret |= (1 << 8)
	}

	return ret
}

type AccountFilterFlags struct {
	Debits   bool
	Credits  bool
	Reversed bool
}

func (f AccountFilterFlags) ToUint32() uint32 {
	var ret uint32 = 0

	if f.Debits {
		ret |= (1 << 0)
	}

	if f.Credits {
		ret |= (1 << 1)
	}

	if f.Reversed {
		ret |= (1 << 2)
	}

	return ret
}

type QueryFilterFlags struct {
	Reversed bool
}

func (f QueryFilterFlags) ToUint32() uint32 {
	var ret uint32 = 0

	if f.Reversed {
		ret |= (1 << 0)
	}

	return ret
}

type Account struct {
	ID             Uint128
	DebitsPending  Uint128
	DebitsPosted   Uint128
	CreditsPending Uint128
	CreditsPosted  Uint128
	UserData128    Uint128
	UserData64     uint64
	UserData32     uint32
	Reserved       uint32
	Ledger         uint32
	Code           uint16
	Flags          uint16
	Timestamp      uint64
}

func (o Account) AccountFlags() AccountFlags {
	var f AccountFlags
	f.Linked = ((o.Flags >> 0) & 0x1) == 1
	f.DebitsMustNotExceedCredits = ((o.Flags >> 1) & 0x1) == 1
	f.CreditsMustNotExceedDebits = ((o.Flags >> 2) & 0x1) == 1
	f.History = ((o.Flags >> 3) & 0x1) == 1
	f.Imported = ((o.Flags >> 4) & 0x1) == 1
	f.Closed = ((o.Flags >> 5) & 0x1) == 1
	return f
}

type Transfer struct {
	ID              Uint128
	DebitAccountID  Uint128
	CreditAccountID Uint128
	Amount          Uint128
	PendingID       Uint128
	UserData128     Uint128
	UserData64      uint64
	UserData32      uint32
	Timeout         uint32
	Ledger          uint32
	Code            uint16
	Flags           uint16
	Timestamp       uint64
}

func (o Transfer) TransferFlags() TransferFlags {
	var f TransferFlags
	f.Linked = ((o.Flags >> 0) & 0x1) == 1
	f.Pending = ((o.Flags >> 1) & 0x1) == 1
	f.PostPendingTransfer = ((o.Flags >> 2) & 0x1) == 1
	f.VoidPendingTransfer = ((o.Flags >> 3) & 0x1) == 1
	f.BalancingDebit = ((o.Flags >> 4) & 0x1) == 1
	f.BalancingCredit = ((o.Flags >> 5) & 0x1) == 1
	f.ClosingDebit = ((o.Flags >> 6) & 0x1) == 1
	f.ClosingCredit = ((o.Flags >> 7) & 0x1) == 1
	f.Imported = ((o.Flags >> 8) & 0x1) == 1
	return f
}

type CreateAccountStatus uint32

const (
	AccountCreated                              CreateAccountStatus = 0
	AccountLinkedEventFailed                    CreateAccountStatus = 1
	AccountLinkedEventChainOpen                 CreateAccountStatus = 2
	AccountImportedEventExpected                CreateAccountStatus = 22
	AccountImportedEventNotExpected             CreateAccountStatus = 23
	AccountTimestampMustBeZero                  CreateAccountStatus = 3
	AccountImportedEventTimestampOutOfRange     CreateAccountStatus = 24
	AccountImportedEventTimestampMustNotAdvance CreateAccountStatus = 25
	AccountReservedField                        CreateAccountStatus = 4
	AccountReservedFlag                         CreateAccountStatus = 5
	AccountIDMustNotBeZero                      CreateAccountStatus = 6
	AccountIDMustNotBeIntMax                    CreateAccountStatus = 7
	AccountExistsWithDifferentFlags             CreateAccountStatus = 15
	AccountExistsWithDifferentUserData128       CreateAccountStatus = 16
	AccountExistsWithDifferentUserData64        CreateAccountStatus = 17
	AccountExistsWithDifferentUserData32        CreateAccountStatus = 18
	AccountExistsWithDifferentLedger            CreateAccountStatus = 19
	AccountExistsWithDifferentCode              CreateAccountStatus = 20
	AccountExists                               CreateAccountStatus = 21
	AccountFlagsAreMutuallyExclusive            CreateAccountStatus = 8
	AccountDebitsPendingMustBeZero              CreateAccountStatus = 9
	AccountDebitsPostedMustBeZero               CreateAccountStatus = 10
	AccountCreditsPendingMustBeZero             CreateAccountStatus = 11
	AccountCreditsPostedMustBeZero              CreateAccountStatus = 12
	AccountLedgerMustNotBeZero                  CreateAccountStatus = 13
	AccountCodeMustNotBeZero                    CreateAccountStatus = 14
	AccountImportedEventTimestampMustNotRegress CreateAccountStatus = 26
)

func (i CreateAccountStatus) String() string {
	switch i {
	case AccountCreated:
		return "AccountCreated"
	case AccountLinkedEventFailed:
		return "AccountLinkedEventFailed"
	case AccountLinkedEventChainOpen:
		return "AccountLinkedEventChainOpen"
	case AccountImportedEventExpected:
		return "AccountImportedEventExpected"
	case AccountImportedEventNotExpected:
		return "AccountImportedEventNotExpected"
	case AccountTimestampMustBeZero:
		return "AccountTimestampMustBeZero"
	case AccountImportedEventTimestampOutOfRange:
		return "AccountImportedEventTimestampOutOfRange"
	case AccountImportedEventTimestampMustNotAdvance:
		return "AccountImportedEventTimestampMustNotAdvance"
	case AccountReservedField:
		return "AccountReservedField"
	case AccountReservedFlag:
		return "AccountReservedFlag"
	case AccountIDMustNotBeZero:
		return "AccountIDMustNotBeZero"
	case AccountIDMustNotBeIntMax:
		return "AccountIDMustNotBeIntMax"
	case AccountExistsWithDifferentFlags:
		return "AccountExistsWithDifferentFlags"
	case AccountExistsWithDifferentUserData128:
		return "AccountExistsWithDifferentUserData128"
	case AccountExistsWithDifferentUserData64:
		return "AccountExistsWithDifferentUserData64"
	case AccountExistsWithDifferentUserData32:
		return "AccountExistsWithDifferentUserData32"
	case AccountExistsWithDifferentLedger:
		return "AccountExistsWithDifferentLedger"
	case AccountExistsWithDifferentCode:
		return "AccountExistsWithDifferentCode"
	case AccountExists:
		return "AccountExists"
	case AccountFlagsAreMutuallyExclusive:
		return "AccountFlagsAreMutuallyExclusive"
	case AccountDebitsPendingMustBeZero:
		return "AccountDebitsPendingMustBeZero"
	case AccountDebitsPostedMustBeZero:
		return "AccountDebitsPostedMustBeZero"
	case AccountCreditsPendingMustBeZero:
		return "AccountCreditsPendingMustBeZero"
	case AccountCreditsPostedMustBeZero:
		return "AccountCreditsPostedMustBeZero"
	case AccountLedgerMustNotBeZero:
		return "AccountLedgerMustNotBeZero"
	case AccountCodeMustNotBeZero:
		return "AccountCodeMustNotBeZero"
	case AccountImportedEventTimestampMustNotRegress:
		return "AccountImportedEventTimestampMustNotRegress"
	}
	return "CreateAccountStatus(" + strconv.FormatInt(int64(i+1), 10) + ")"
}

type CreateTransferStatus uint32

const (
	TransferCreated                                         CreateTransferStatus = 0
	TransferLinkedEventFailed                               CreateTransferStatus = 1
	TransferLinkedEventChainOpen                            CreateTransferStatus = 2
	TransferImportedEventExpected                           CreateTransferStatus = 56
	TransferImportedEventNotExpected                        CreateTransferStatus = 57
	TransferTimestampMustBeZero                             CreateTransferStatus = 3
	TransferImportedEventTimestampOutOfRange                CreateTransferStatus = 58
	TransferImportedEventTimestampMustNotAdvance            CreateTransferStatus = 59
	TransferReservedFlag                                    CreateTransferStatus = 4
	TransferIDMustNotBeZero                                 CreateTransferStatus = 5
	TransferIDMustNotBeIntMax                               CreateTransferStatus = 6
	TransferExistsWithDifferentFlags                        CreateTransferStatus = 36
	TransferExistsWithDifferentPendingID                    CreateTransferStatus = 40
	TransferExistsWithDifferentTimeout                      CreateTransferStatus = 44
	TransferExistsWithDifferentDebitAccountID               CreateTransferStatus = 37
	TransferExistsWithDifferentCreditAccountID              CreateTransferStatus = 38
	TransferExistsWithDifferentAmount                       CreateTransferStatus = 39
	TransferExistsWithDifferentUserData128                  CreateTransferStatus = 41
	TransferExistsWithDifferentUserData64                   CreateTransferStatus = 42
	TransferExistsWithDifferentUserData32                   CreateTransferStatus = 43
	TransferExistsWithDifferentLedger                       CreateTransferStatus = 67
	TransferExistsWithDifferentCode                         CreateTransferStatus = 45
	TransferExists                                          CreateTransferStatus = 46
	TransferIDAlreadyFailed                                 CreateTransferStatus = 68
	TransferFlagsAreMutuallyExclusive                       CreateTransferStatus = 7
	TransferDebitAccountIDMustNotBeZero                     CreateTransferStatus = 8
	TransferDebitAccountIDMustNotBeIntMax                   CreateTransferStatus = 9
	TransferCreditAccountIDMustNotBeZero                    CreateTransferStatus = 10
	TransferCreditAccountIDMustNotBeIntMax                  CreateTransferStatus = 11
	TransferAccountsMustBeDifferent                         CreateTransferStatus = 12
	TransferPendingIDMustBeZero                             CreateTransferStatus = 13
	TransferPendingIDMustNotBeZero                          CreateTransferStatus = 14
	TransferPendingIDMustNotBeIntMax                        CreateTransferStatus = 15
	TransferPendingIDMustBeDifferent                        CreateTransferStatus = 16
	TransferTimeoutReservedForPendingTransfer               CreateTransferStatus = 17
	TransferClosingTransferMustBePending                    CreateTransferStatus = 64
	TransferLedgerMustNotBeZero                             CreateTransferStatus = 19
	TransferCodeMustNotBeZero                               CreateTransferStatus = 20
	TransferDebitAccountNotFound                            CreateTransferStatus = 21
	TransferCreditAccountNotFound                           CreateTransferStatus = 22
	TransferAccountsMustHaveTheSameLedger                   CreateTransferStatus = 23
	TransferTransferMustHaveTheSameLedgerAsAccounts         CreateTransferStatus = 24
	TransferPendingTransferNotFound                         CreateTransferStatus = 25
	TransferPendingTransferNotPending                       CreateTransferStatus = 26
	TransferPendingTransferHasDifferentDebitAccountID       CreateTransferStatus = 27
	TransferPendingTransferHasDifferentCreditAccountID      CreateTransferStatus = 28
	TransferPendingTransferHasDifferentLedger               CreateTransferStatus = 29
	TransferPendingTransferHasDifferentCode                 CreateTransferStatus = 30
	TransferExceedsPendingTransferAmount                    CreateTransferStatus = 31
	TransferPendingTransferHasDifferentAmount               CreateTransferStatus = 32
	TransferPendingTransferAlreadyPosted                    CreateTransferStatus = 33
	TransferPendingTransferAlreadyVoided                    CreateTransferStatus = 34
	TransferPendingTransferExpired                          CreateTransferStatus = 35
	TransferImportedEventTimestampMustNotRegress            CreateTransferStatus = 60
	TransferImportedEventTimestampMustPostdateDebitAccount  CreateTransferStatus = 61
	TransferImportedEventTimestampMustPostdateCreditAccount CreateTransferStatus = 62
	TransferImportedEventTimeoutMustBeZero                  CreateTransferStatus = 63
	TransferDebitAccountAlreadyClosed                       CreateTransferStatus = 65
	TransferCreditAccountAlreadyClosed                      CreateTransferStatus = 66
	TransferOverflowsDebitsPending                          CreateTransferStatus = 47
	TransferOverflowsCreditsPending                         CreateTransferStatus = 48
	TransferOverflowsDebitsPosted                           CreateTransferStatus = 49
	TransferOverflowsCreditsPosted                          CreateTransferStatus = 50
	TransferOverflowsDebits                                 CreateTransferStatus = 51
	TransferOverflowsCredits                                CreateTransferStatus = 52
	TransferOverflowsTimeout                                CreateTransferStatus = 53
	TransferExceedsCredits                                  CreateTransferStatus = 54
	TransferExceedsDebits                                   CreateTransferStatus = 55
)

func (i CreateTransferStatus) String() string {
	switch i {
	case TransferCreated:
		return "TransferCreated"
	case TransferLinkedEventFailed:
		return "TransferLinkedEventFailed"
	case TransferLinkedEventChainOpen:
		return "TransferLinkedEventChainOpen"
	case TransferImportedEventExpected:
		return "TransferImportedEventExpected"
	case TransferImportedEventNotExpected:
		return "TransferImportedEventNotExpected"
	case TransferTimestampMustBeZero:
		return "TransferTimestampMustBeZero"
	case TransferImportedEventTimestampOutOfRange:
		return "TransferImportedEventTimestampOutOfRange"
	case TransferImportedEventTimestampMustNotAdvance:
		return "TransferImportedEventTimestampMustNotAdvance"
	case TransferReservedFlag:
		return "TransferReservedFlag"
	case TransferIDMustNotBeZero:
		return "TransferIDMustNotBeZero"
	case TransferIDMustNotBeIntMax:
		return "TransferIDMustNotBeIntMax"
	case TransferExistsWithDifferentFlags:
		return "TransferExistsWithDifferentFlags"
	case TransferExistsWithDifferentPendingID:
		return "TransferExistsWithDifferentPendingID"
	case TransferExistsWithDifferentTimeout:
		return "TransferExistsWithDifferentTimeout"
	case TransferExistsWithDifferentDebitAccountID:
		return "TransferExistsWithDifferentDebitAccountID"
	case TransferExistsWithDifferentCreditAccountID:
		return "TransferExistsWithDifferentCreditAccountID"
	case TransferExistsWithDifferentAmount:
		return "TransferExistsWithDifferentAmount"
	case TransferExistsWithDifferentUserData128:
		return "TransferExistsWithDifferentUserData128"
	case TransferExistsWithDifferentUserData64:
		return "TransferExistsWithDifferentUserData64"
	case TransferExistsWithDifferentUserData32:
		return "TransferExistsWithDifferentUserData32"
	case TransferExistsWithDifferentLedger:
		return "TransferExistsWithDifferentLedger"
	case TransferExistsWithDifferentCode:
		return "TransferExistsWithDifferentCode"
	case TransferExists:
		return "TransferExists"
	case TransferIDAlreadyFailed:
		return "TransferIDAlreadyFailed"
	case TransferFlagsAreMutuallyExclusive:
		return "TransferFlagsAreMutuallyExclusive"
	case TransferDebitAccountIDMustNotBeZero:
		return "TransferDebitAccountIDMustNotBeZero"
	case TransferDebitAccountIDMustNotBeIntMax:
		return "TransferDebitAccountIDMustNotBeIntMax"
	case TransferCreditAccountIDMustNotBeZero:
		return "TransferCreditAccountIDMustNotBeZero"
	case TransferCreditAccountIDMustNotBeIntMax:
		return "TransferCreditAccountIDMustNotBeIntMax"
	case TransferAccountsMustBeDifferent:
		return "TransferAccountsMustBeDifferent"
	case TransferPendingIDMustBeZero:
		return "TransferPendingIDMustBeZero"
	case TransferPendingIDMustNotBeZero:
		return "TransferPendingIDMustNotBeZero"
	case TransferPendingIDMustNotBeIntMax:
		return "TransferPendingIDMustNotBeIntMax"
	case TransferPendingIDMustBeDifferent:
		return "TransferPendingIDMustBeDifferent"
	case TransferTimeoutReservedForPendingTransfer:
		return "TransferTimeoutReservedForPendingTransfer"
	case TransferClosingTransferMustBePending:
		return "TransferClosingTransferMustBePending"
	case TransferLedgerMustNotBeZero:
		return "TransferLedgerMustNotBeZero"
	case TransferCodeMustNotBeZero:
		return "TransferCodeMustNotBeZero"
	case TransferDebitAccountNotFound:
		return "TransferDebitAccountNotFound"
	case TransferCreditAccountNotFound:
		return "TransferCreditAccountNotFound"
	case TransferAccountsMustHaveTheSameLedger:
		return "TransferAccountsMustHaveTheSameLedger"
	case TransferTransferMustHaveTheSameLedgerAsAccounts:
		return "TransferTransferMustHaveTheSameLedgerAsAccounts"
	case TransferPendingTransferNotFound:
		return "TransferPendingTransferNotFound"
	case TransferPendingTransferNotPending:
		return "TransferPendingTransferNotPending"
	case TransferPendingTransferHasDifferentDebitAccountID:
		return "TransferPendingTransferHasDifferentDebitAccountID"
	case TransferPendingTransferHasDifferentCreditAccountID:
		return "TransferPendingTransferHasDifferentCreditAccountID"
	case TransferPendingTransferHasDifferentLedger:
		return "TransferPendingTransferHasDifferentLedger"
	case TransferPendingTransferHasDifferentCode:
		return "TransferPendingTransferHasDifferentCode"
	case TransferExceedsPendingTransferAmount:
		return "TransferExceedsPendingTransferAmount"
	case TransferPendingTransferHasDifferentAmount:
		return "TransferPendingTransferHasDifferentAmount"
	case TransferPendingTransferAlreadyPosted:
		return "TransferPendingTransferAlreadyPosted"
	case TransferPendingTransferAlreadyVoided:
		return "TransferPendingTransferAlreadyVoided"
	case TransferPendingTransferExpired:
		return "TransferPendingTransferExpired"
	case TransferImportedEventTimestampMustNotRegress:
		return "TransferImportedEventTimestampMustNotRegress"
	case TransferImportedEventTimestampMustPostdateDebitAccount:
		return "TransferImportedEventTimestampMustPostdateDebitAccount"
	case TransferImportedEventTimestampMustPostdateCreditAccount:
		return "TransferImportedEventTimestampMustPostdateCreditAccount"
	case TransferImportedEventTimeoutMustBeZero:
		return "TransferImportedEventTimeoutMustBeZero"
	case TransferDebitAccountAlreadyClosed:
		return "TransferDebitAccountAlreadyClosed"
	case TransferCreditAccountAlreadyClosed:
		return "TransferCreditAccountAlreadyClosed"
	case TransferOverflowsDebitsPending:
		return "TransferOverflowsDebitsPending"
	case TransferOverflowsCreditsPending:
		return "TransferOverflowsCreditsPending"
	case TransferOverflowsDebitsPosted:
		return "TransferOverflowsDebitsPosted"
	case TransferOverflowsCreditsPosted:
		return "TransferOverflowsCreditsPosted"
	case TransferOverflowsDebits:
		return "TransferOverflowsDebits"
	case TransferOverflowsCredits:
		return "TransferOverflowsCredits"
	case TransferOverflowsTimeout:
		return "TransferOverflowsTimeout"
	case TransferExceedsCredits:
		return "TransferExceedsCredits"
	case TransferExceedsDebits:
		return "TransferExceedsDebits"
	}
	return "CreateTransferStatus(" + strconv.FormatInt(int64(i+1), 10) + ")"
}

type CreateAccountResult struct {
	Timestamp uint64
	Status    CreateAccountStatus
	Reserved  uint32
}

type CreateTransferResult struct {
	Timestamp uint64
	Status    CreateTransferStatus
	Reserved  uint32
}

type AccountFilter struct {
	AccountID    Uint128
	UserData128  Uint128
	UserData64   uint64
	UserData32   uint32
	Code         uint16
	Reserved     [58]uint8
	TimestampMin uint64
	TimestampMax uint64
	Limit        uint32
	Flags        uint32
}

func (o AccountFilter) AccountFilterFlags() AccountFilterFlags {
	var f AccountFilterFlags
	f.Debits = ((o.Flags >> 0) & 0x1) == 1
	f.Credits = ((o.Flags >> 1) & 0x1) == 1
	f.Reversed = ((o.Flags >> 2) & 0x1) == 1
	return f
}

type AccountBalance struct {
	DebitsPending  Uint128
	DebitsPosted   Uint128
	CreditsPending Uint128
	CreditsPosted  Uint128
	Timestamp      uint64
	Reserved       [56]uint8
}

type QueryFilter struct {
	UserData128  Uint128
	UserData64   uint64
	UserData32   uint32
	Ledger       uint32
	Code         uint16
	Reserved     [6]uint8
	TimestampMin uint64
	TimestampMax uint64
	Limit        uint32
	Flags        uint32
}

func (o QueryFilter) QueryFilterFlags() QueryFilterFlags {
	var f QueryFilterFlags
	f.Reversed = ((o.Flags >> 0) & 0x1) == 1
	return f
}

type ChangeEvent struct {
	TransferID                  Uint128
	TransferAmount              Uint128
	TransferPendingID           Uint128
	TransferUserData128         Uint128
	TransferUserData64          uint64
	TransferUserData32          uint32
	TransferTimeout             uint32
	TransferCode                uint16
	TransferFlags               uint16
	Ledger                      uint32
	Type                        ChangeEventType
	Reserved                    [39]uint8
	DebitAccountID              Uint128
	DebitAccountDebitsPending   Uint128
	DebitAccountDebitsPosted    Uint128
	DebitAccountCreditsPending  Uint128
	DebitAccountCreditsPosted   Uint128
	DebitAccountUserData128     Uint128
	DebitAccountUserData64      uint64
	DebitAccountUserData32      uint32
	DebitAccountCode            uint16
	DebitAccountFlags           uint16
	CreditAccountID             Uint128
	CreditAccountDebitsPending  Uint128
	CreditAccountDebitsPosted   Uint128
	CreditAccountCreditsPending Uint128
	CreditAccountCreditsPosted  Uint128
	CreditAccountUserData128    Uint128
	CreditAccountUserData64     uint64
	CreditAccountUserData32     uint32
	CreditAccountCode           uint16
	CreditAccountFlags          uint16
	Timestamp                   uint64
	TransferTimestamp           uint64
	DebitAccountTimestamp       uint64
	CreditAccountTimestamp      uint64
}

type ChangeEventType uint8

const (
	ChangeEventSinglePhase     ChangeEventType = 0
	ChangeEventTwoPhasePending ChangeEventType = 1
	ChangeEventTwoPhasePosted  ChangeEventType = 2
	ChangeEventTwoPhaseVoided  ChangeEventType = 3
	ChangeEventTwoPhaseExpired ChangeEventType = 4
)

func (i ChangeEventType) String() string {
	switch i {
	case ChangeEventSinglePhase:
		return "ChangeEventSinglePhase"
	case ChangeEventTwoPhasePending:
		return "ChangeEventTwoPhasePending"
	case ChangeEventTwoPhasePosted:
		return "ChangeEventTwoPhasePosted"
	case ChangeEventTwoPhaseVoided:
		return "ChangeEventTwoPhaseVoided"
	case ChangeEventTwoPhaseExpired:
		return "ChangeEventTwoPhaseExpired"
	}
	return "ChangeEventType(" + strconv.FormatInt(int64(i+1), 10) + ")"
}

type ChangeEventsFilter struct {
	TimestampMin uint64
	TimestampMax uint64
	Limit        uint32
	Reserved     [44]uint8
}

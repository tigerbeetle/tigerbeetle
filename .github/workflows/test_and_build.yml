name: Docker CI

on:
  # Run CI against any commits pushed to 'main', as well as 'staging' and 'trying' for bors.
  push:
    branches:
      - 'main'
      - 'staging'
      - 'trying'
  # Run CI for any PRs that target 'main' when they are opened or updated.
  pull_request:
    branches:
      - 'main'
    types:
      - opened
      - synchronize

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate_docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/validate_docs.sh
    env:
      SOURCE_REPO: ${{ github.event.pull_request.head.repo.clone_url }}

  shellcheck_scripts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/shellcheck.sh

  test_format:
    name: Run zig fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: ./zig/zig fmt . --check

  test_on_linux:
    name: Run tests on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        # Short script but encapsulates the docker command to make it easier to run/debug locally
      - run: ./scripts/tests_on_ubuntu.sh

  test_on_alpine:
    name: Run tests on Alpine
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        # Short script but encapsulates the docker command to make it easier to run/debug locally
      - run: ./scripts/tests_on_alpine.sh

  test_on_macos:
    name: Run tests on macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build test
      - run: ./scripts/install.sh

  benchmark_on_linux:
    name: Run benchmark on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/benchmark.sh

  benchmark_on_macos:
    name: Run benchmark on macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/benchmark.sh

  # TODO Temporarily disabled. See https://github.com/tigerbeetledb/tigerbeetle/issues/473 
  #benchmark_on_windows:
  #  name: Run benchmark on Windows
  #  runs-on: windows-latest
  #  steps:
  #    - uses: actions/checkout@v2
  #    - run: ./scripts/benchmark.bat

  fuzz_ewah:
    name: 'Fuzz EWAH codec'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build fuzz_ewah -- --seed 123

  fuzz_lsm_manifest_log:
    name: 'Fuzz LSM ManifestLog'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build fuzz_lsm_manifest_log -- --seed 123 --events-max 400

  fuzz_lsm_segmented_array:
    name: 'Fuzz LSM SegmentedArray'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build fuzz_lsm_segmented_array -- --seed 123

  fuzz_lsm_tree:
    name: 'Fuzz LSM Tree'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build fuzz_lsm_tree -- --seed 123 --events-max 400

  fuzz_vsr_journal_format:
    name: 'Fuzz VSR WAL format'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build fuzz_vsr_journal_format -- --seed 123

  fuzz_vsr_superblock:
    name: 'Fuzz VSR SuperBlock'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build fuzz_vsr_superblock -- --seed 123 --events-max 3

  fuzz_vsr_superblock_free_set:
    name: 'Fuzz VSR SuperBlock FreeSet'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build fuzz_vsr_superblock_free_set -- --seed 123

  fuzz_vsr_superblock_quorums:
    name: 'Fuzz VSR SuperBlock Quorums'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build fuzz_vsr_superblock_quorums -- --seed 123

  # This both checks that the hash_log builds and acts as a regression test for
  # https://github.com/tigerbeetledb/tigerbeetle/issues/404
  fuzz_hash_log:
    name: 'Fuzz LSM Forest with hash_log'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build fuzz_lsm_forest -Dhash-log-mode=create -Drelease-safe -- --seed 16319736705930193193 --events-max 10000
      - run: zig/zig build fuzz_lsm_forest -Dhash-log-mode=check -- --seed 16319736705930193193 --events-max 10000

  # This is just a canary to make sure that the simulator compiles
  # It would be a good idea to also _run_ a single iteration,
  # but that currently has some false failures :-)
  simulator:
    name: 'Simulator canary'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        state_machine: [accounting, testing]
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/install_zig.sh
      - run: zig/zig build simulator -Dsimulator-state-machine=${{matrix.state_machine}}

  # Verify that these build without errors:
  build-tools:
    name: 'Verify build'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: git submodule init
      - run: git submodule update
      - run: ./scripts/install_zig.sh
      - run: zig/zig build go_client
      - run: zig/zig build java_client
      - run: zig/zig build dotnet_client
      - run: zig/zig build build_benchmark_ewah
      - run: zig/zig build build_benchmark_eytzinger
      - run: zig/zig build build_benchmark_segmented_array
      - run: zig/zig build -Dtracer-backend=perfetto
      - run: zig/zig build -Dtracer-backend=tracy

  build-and-push:
    name: 'Build and push Docker image'
    runs-on: ubuntu-latest
    needs: [test_on_linux, test_on_macos]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}

      # Qemu takes a while to set up and run but it lets us build ARM
      # and AMD Docker images. We only really need this on merges to
      # main.
      - if: github.ref == 'refs/heads/main'
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GHCR
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - if: github.ref == 'refs/heads/main'
        name: Build and push Docker images (ARM and AMD)
        id: docker_build_release
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: release
          platforms: linux/amd64,linux/arm64

      # On pull requests only build the native image
      - if: github.ref != 'refs/heads/main'
        name: Build and push Docker image (native only, shortcut for pull requests)
        id: docker_build_pr
        uses: docker/build-push-action@v2
        with:
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: release

      # Validate the image
      - if: github.ref == 'refs/heads/main'
        uses: actions/checkout@v2
      - if: github.ref == 'refs/heads/main'
        run: ./scripts/confirm_image.sh ghcr.io/${{ env.IMAGE_NAME }}@${{ steps.docker_build_release.outputs.imageid }} --want-production

  build-and-push-debug:
    runs-on: ubuntu-latest
    needs: [test_on_linux, test_on_macos]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2

      # Qemu takes a while to set up and run but it lets us build ARM
      # and AMD Docker images. We only really need this on merges to
      # main.
      - if: github.ref == 'refs/heads/main'
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - if: github.ref == 'refs/heads/main'
        name: Build and push debug Docker images (ARM and AMD)
        uses: docker/build-push-action@v2
        id: docker_build_debug
        with:
          build-args: |
            DEBUG=true
          tags: ghcr.io/${{ env.IMAGE_NAME }}:debug
          labels: ${{ steps.meta.outputs.labels }}
          target: release
          push: true
          platforms: linux/amd64,linux/arm64

      # On pull requests only build the native image
      - if: github.ref != 'refs/heads/main'
        name: Build and push debug Docker image (native only, shortcut for pull requests)
        uses: docker/build-push-action@v2
        id: docker_build_debug_pr
        with:
          build-args: |
            DEBUG=true
          tags: ghcr.io/${{ env.IMAGE_NAME }}:debug
          labels: ${{ steps.meta.outputs.labels }}
          target: release
          push: false

      # Validate the image
      - if: github.ref == 'refs/heads/main'
        uses: actions/checkout@v2
      - if: github.ref == 'refs/heads/main'
        run: ./scripts/confirm_image.sh ghcr.io/${{ env.IMAGE_NAME }}@${{ steps.docker_build_debug.outputs.imageid }} --want-debug

  # Keep this around because Github CI looks for this job of this name.
  test:
    runs-on: ubuntu-latest
    needs: [test_format, test_on_linux]
    steps:
      - run: echo "done"

  bors_tigerbeetle:
    name: bors/tigerbeetle
    needs:
      - validate_docs
      - shellcheck_scripts
      - test_format
      - test_on_linux
      - test_on_alpine
      - test_on_macos
      - benchmark_on_linux
      - benchmark_on_macos
      # - benchmark_on_windows
      - fuzz_ewah
      - fuzz_lsm_manifest_log
      - fuzz_lsm_segmented_array
      - fuzz_lsm_tree
      - fuzz_vsr_journal_format
      - fuzz_vsr_superblock
      - fuzz_vsr_superblock_free_set
      - fuzz_vsr_superblock_quorums
      - fuzz_hash_log
      - simulator
      - build-tools
      - build-and-push
      - build-and-push-debug

    runs-on: ubuntu-latest
    steps:
      - name: CI succeeded
        working-directory: ./
        run: exit 0

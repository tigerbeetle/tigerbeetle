//////////////////////////////////////////////////////////
// This file was auto-generated by java_bindings.zig
// Do not manually modify.
//////////////////////////////////////////////////////////

package com.tigerbeetle;

import java.nio.ByteBuffer;


public final class CreateAccountResultBatch extends Batch {


    interface Struct {
        int SIZE = 16;

        int Timestamp = 0;
        int Status = 8;
        int Reserved = 12;
    }

    /**
     * Creates an empty batch with the desired maximum capacity.
     * <p>
     * Once created, an instance cannot be resized, however it may contain any number of elements
     * between zero and its {@link #getCapacity capacity}.
     *
     * @param capacity the maximum capacity.
     * @throws IllegalArgumentException if capacity is negative.
     */
    public CreateAccountResultBatch(final int capacity) {
        super(capacity, Struct.SIZE);
    }

    CreateAccountResultBatch(final ByteBuffer buffer) {
        super(buffer, Struct.SIZE);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     */
    public long getTimestamp() {
        final var value = getUInt64(at(Struct.Timestamp));
        return value;
    }

    /**
     * @param timestamp
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    void setTimestamp(final long timestamp) {
        putUInt64(at(Struct.Timestamp), timestamp);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     */
    public CreateAccountStatus getStatus() {
        final var value = getUInt32(at(Struct.Status));
        return CreateAccountStatus.fromValue(value);
    }

    /**
     * @param status
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    void setStatus(final CreateAccountStatus status) {
        putUInt32(at(Struct.Status), status.value);
    }

    /**
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     */
    int getReserved() {
        final var value = getUInt32(at(Struct.Reserved));
        return value;
    }

    /**
     * @param reserved
     * @throws IllegalStateException if not at a {@link #isValidPosition valid position}.
     * @throws IllegalStateException if a {@link #isReadOnly() read-only} batch.
     */
    void setReserved(final int reserved) {
        putUInt32(at(Struct.Reserved), reserved);
    }

}


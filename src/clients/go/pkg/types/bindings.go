///////////////////////////////////////////////////////
// This file was auto-generated by go_bindings.zig   //
//              Do not manually modify.              //
///////////////////////////////////////////////////////

package types

/*
#include "../native/tb_client.h"
*/
import "C"
import "strconv"

type AccountFlags struct {
	Linked                     bool
	DebitsMustNotExceedCredits bool
	CreditsMustNotExceedDebits bool
}

func (f AccountFlags) ToUint16() uint16 {
	var ret uint16 = 0

	if f.Linked {
		ret |= (1 << 0)
	}

	if f.DebitsMustNotExceedCredits {
		ret |= (1 << 1)
	}

	if f.CreditsMustNotExceedDebits {
		ret |= (1 << 2)
	}

	return ret
}

type TransferFlags struct {
	Linked              bool
	Pending             bool
	PostPendingTransfer bool
	VoidPendingTransfer bool
}

func (f TransferFlags) ToUint16() uint16 {
	var ret uint16 = 0

	if f.Linked {
		ret |= (1 << 0)
	}

	if f.Pending {
		ret |= (1 << 1)
	}

	if f.PostPendingTransfer {
		ret |= (1 << 2)
	}

	if f.VoidPendingTransfer {
		ret |= (1 << 3)
	}

	return ret
}

type Account struct {
	Id             Uint128
	UserData       Uint128
	Reserved       [48]uint8
	Ledger         uint32
	Code           uint16
	Flags          uint16
	DebitsPending  uint64
	DebitsPosted   uint64
	CreditsPending uint64
	CreditsPosted  uint64
	Timestamp      uint64
}

type Transfer struct {
	Id              Uint128
	DebitAccountId  Uint128
	CreditAccountId Uint128
	UserData        Uint128
	Reserved        Uint128
	PendingId       Uint128
	Timeout         uint64
	Ledger          uint32
	Code            uint16
	Flags           uint16
	Amount          uint64
	Timestamp       uint64
}

type CreateAccountResult uint32

const (
	AccountOk                          CreateAccountResult = 0
	AccountLinkedEventFailed           CreateAccountResult = 1
	AccountLinkedEventChainOpen        CreateAccountResult = 2
	AccountReservedFlag                CreateAccountResult = 3
	AccountReservedField               CreateAccountResult = 4
	AccountIdMustNotBeZero             CreateAccountResult = 5
	AccountIdMustNotBeIntMax           CreateAccountResult = 6
	AccountLedgerMustNotBeZero         CreateAccountResult = 7
	AccountCodeMustNotBeZero           CreateAccountResult = 8
	AccountDebitsPendingMustBeZero     CreateAccountResult = 9
	AccountDebitsPostedMustBeZero      CreateAccountResult = 10
	AccountCreditsPendingMustBeZero    CreateAccountResult = 11
	AccountCreditsPostedMustBeZero     CreateAccountResult = 12
	AccountMutuallyExclusiveFlags      CreateAccountResult = 13
	AccountExistsWithDifferentFlags    CreateAccountResult = 14
	AccountExistsWithDifferentUserData CreateAccountResult = 15
	AccountExistsWithDifferentLedger   CreateAccountResult = 16
	AccountExistsWithDifferentCode     CreateAccountResult = 17
	AccountExists                      CreateAccountResult = 18
)

func (i CreateAccountResult) String() string {
	switch i {
	case AccountOk:
		return "AccountOk"
	case AccountLinkedEventFailed:
		return "AccountLinkedEventFailed"
	case AccountLinkedEventChainOpen:
		return "AccountLinkedEventChainOpen"
	case AccountReservedFlag:
		return "AccountReservedFlag"
	case AccountReservedField:
		return "AccountReservedField"
	case AccountIdMustNotBeZero:
		return "AccountIdMustNotBeZero"
	case AccountIdMustNotBeIntMax:
		return "AccountIdMustNotBeIntMax"
	case AccountLedgerMustNotBeZero:
		return "AccountLedgerMustNotBeZero"
	case AccountCodeMustNotBeZero:
		return "AccountCodeMustNotBeZero"
	case AccountDebitsPendingMustBeZero:
		return "AccountDebitsPendingMustBeZero"
	case AccountDebitsPostedMustBeZero:
		return "AccountDebitsPostedMustBeZero"
	case AccountCreditsPendingMustBeZero:
		return "AccountCreditsPendingMustBeZero"
	case AccountCreditsPostedMustBeZero:
		return "AccountCreditsPostedMustBeZero"
	case AccountMutuallyExclusiveFlags:
		return "AccountMutuallyExclusiveFlags"
	case AccountExistsWithDifferentFlags:
		return "AccountExistsWithDifferentFlags"
	case AccountExistsWithDifferentUserData:
		return "AccountExistsWithDifferentUserData"
	case AccountExistsWithDifferentLedger:
		return "AccountExistsWithDifferentLedger"
	case AccountExistsWithDifferentCode:
		return "AccountExistsWithDifferentCode"
	case AccountExists:
		return "AccountExists"
	}
	return "CreateAccountResult(" + strconv.FormatInt(int64(i+1), 10) + ")"
}

type CreateTransferResult uint32

const (
	TransferOk                                         CreateTransferResult = 0
	TransferLinkedEventFailed                          CreateTransferResult = 1
	TransferLinkedEventChainOpen                       CreateTransferResult = 2
	TransferReservedFlag                               CreateTransferResult = 3
	TransferReservedField                              CreateTransferResult = 4
	TransferIdMustNotBeZero                            CreateTransferResult = 5
	TransferIdMustNotBeIntMax                          CreateTransferResult = 6
	TransferDebitAccountIdMustNotBeZero                CreateTransferResult = 7
	TransferDebitAccountIdMustNotBeIntMax              CreateTransferResult = 8
	TransferCreditAccountIdMustNotBeZero               CreateTransferResult = 9
	TransferCreditAccountIdMustNotBeIntMax             CreateTransferResult = 10
	TransferAccountsMustBeDifferent                    CreateTransferResult = 11
	TransferPendingIdMustBeZero                        CreateTransferResult = 12
	TransferLedgerMustNotBeZero                        CreateTransferResult = 13
	TransferCodeMustNotBeZero                          CreateTransferResult = 14
	TransferAmountMustNotBeZero                        CreateTransferResult = 15
	TransferDebitAccountNotFound                       CreateTransferResult = 16
	TransferCreditAccountNotFound                      CreateTransferResult = 17
	TransferAccountsMustHaveTheSameLedger              CreateTransferResult = 18
	TransferTransferMustHaveTheSameLedgerAsAccounts    CreateTransferResult = 19
	TransferExistsWithDifferentFlags                   CreateTransferResult = 20
	TransferExistsWithDifferentDebitAccountId          CreateTransferResult = 21
	TransferExistsWithDifferentCreditAccountId         CreateTransferResult = 22
	TransferExistsWithDifferentUserData                CreateTransferResult = 23
	TransferExistsWithDifferentPendingId               CreateTransferResult = 24
	TransferExistsWithDifferentTimeout                 CreateTransferResult = 25
	TransferExistsWithDifferentCode                    CreateTransferResult = 26
	TransferExistsWithDifferentAmount                  CreateTransferResult = 27
	TransferExists                                     CreateTransferResult = 28
	TransferOverflowsDebitsPending                     CreateTransferResult = 29
	TransferOverflowsCreditsPending                    CreateTransferResult = 30
	TransferOverflowsDebitsPosted                      CreateTransferResult = 31
	TransferOverflowsCreditsPosted                     CreateTransferResult = 32
	TransferOverflowsDebits                            CreateTransferResult = 33
	TransferOverflowsCredits                           CreateTransferResult = 34
	TransferOverflowsTimeout                           CreateTransferResult = 35
	TransferExceedsCredits                             CreateTransferResult = 36
	TransferExceedsDebits                              CreateTransferResult = 37
	TransferCannotPostAndVoidPendingTransfer           CreateTransferResult = 38
	TransferPendingTransferCannotPostOrVoidAnother     CreateTransferResult = 39
	TransferTimeoutReservedForPendingTransfer          CreateTransferResult = 40
	TransferPendingIdMustNotBeZero                     CreateTransferResult = 41
	TransferPendingIdMustNotBeIntMax                   CreateTransferResult = 42
	TransferPendingIdMustBeDifferent                   CreateTransferResult = 43
	TransferPendingTransferNotFound                    CreateTransferResult = 44
	TransferPendingTransferNotPending                  CreateTransferResult = 45
	TransferPendingTransferHasDifferentDebitAccountId  CreateTransferResult = 46
	TransferPendingTransferHasDifferentCreditAccountId CreateTransferResult = 47
	TransferPendingTransferHasDifferentLedger          CreateTransferResult = 48
	TransferPendingTransferHasDifferentCode            CreateTransferResult = 49
	TransferExceedsPendingTransferAmount               CreateTransferResult = 50
	TransferPendingTransferHasDifferentAmount          CreateTransferResult = 51
	TransferPendingTransferAlreadyPosted               CreateTransferResult = 52
	TransferPendingTransferAlreadyVoided               CreateTransferResult = 53
	TransferPendingTransferExpired                     CreateTransferResult = 54
)

func (i CreateTransferResult) String() string {
	switch i {
	case TransferOk:
		return "TransferOk"
	case TransferLinkedEventFailed:
		return "TransferLinkedEventFailed"
	case TransferLinkedEventChainOpen:
		return "TransferLinkedEventChainOpen"
	case TransferReservedFlag:
		return "TransferReservedFlag"
	case TransferReservedField:
		return "TransferReservedField"
	case TransferIdMustNotBeZero:
		return "TransferIdMustNotBeZero"
	case TransferIdMustNotBeIntMax:
		return "TransferIdMustNotBeIntMax"
	case TransferDebitAccountIdMustNotBeZero:
		return "TransferDebitAccountIdMustNotBeZero"
	case TransferDebitAccountIdMustNotBeIntMax:
		return "TransferDebitAccountIdMustNotBeIntMax"
	case TransferCreditAccountIdMustNotBeZero:
		return "TransferCreditAccountIdMustNotBeZero"
	case TransferCreditAccountIdMustNotBeIntMax:
		return "TransferCreditAccountIdMustNotBeIntMax"
	case TransferAccountsMustBeDifferent:
		return "TransferAccountsMustBeDifferent"
	case TransferPendingIdMustBeZero:
		return "TransferPendingIdMustBeZero"
	case TransferLedgerMustNotBeZero:
		return "TransferLedgerMustNotBeZero"
	case TransferCodeMustNotBeZero:
		return "TransferCodeMustNotBeZero"
	case TransferAmountMustNotBeZero:
		return "TransferAmountMustNotBeZero"
	case TransferDebitAccountNotFound:
		return "TransferDebitAccountNotFound"
	case TransferCreditAccountNotFound:
		return "TransferCreditAccountNotFound"
	case TransferAccountsMustHaveTheSameLedger:
		return "TransferAccountsMustHaveTheSameLedger"
	case TransferTransferMustHaveTheSameLedgerAsAccounts:
		return "TransferTransferMustHaveTheSameLedgerAsAccounts"
	case TransferExistsWithDifferentFlags:
		return "TransferExistsWithDifferentFlags"
	case TransferExistsWithDifferentDebitAccountId:
		return "TransferExistsWithDifferentDebitAccountId"
	case TransferExistsWithDifferentCreditAccountId:
		return "TransferExistsWithDifferentCreditAccountId"
	case TransferExistsWithDifferentUserData:
		return "TransferExistsWithDifferentUserData"
	case TransferExistsWithDifferentPendingId:
		return "TransferExistsWithDifferentPendingId"
	case TransferExistsWithDifferentTimeout:
		return "TransferExistsWithDifferentTimeout"
	case TransferExistsWithDifferentCode:
		return "TransferExistsWithDifferentCode"
	case TransferExistsWithDifferentAmount:
		return "TransferExistsWithDifferentAmount"
	case TransferExists:
		return "TransferExists"
	case TransferOverflowsDebitsPending:
		return "TransferOverflowsDebitsPending"
	case TransferOverflowsCreditsPending:
		return "TransferOverflowsCreditsPending"
	case TransferOverflowsDebitsPosted:
		return "TransferOverflowsDebitsPosted"
	case TransferOverflowsCreditsPosted:
		return "TransferOverflowsCreditsPosted"
	case TransferOverflowsDebits:
		return "TransferOverflowsDebits"
	case TransferOverflowsCredits:
		return "TransferOverflowsCredits"
	case TransferOverflowsTimeout:
		return "TransferOverflowsTimeout"
	case TransferExceedsCredits:
		return "TransferExceedsCredits"
	case TransferExceedsDebits:
		return "TransferExceedsDebits"
	case TransferCannotPostAndVoidPendingTransfer:
		return "TransferCannotPostAndVoidPendingTransfer"
	case TransferPendingTransferCannotPostOrVoidAnother:
		return "TransferPendingTransferCannotPostOrVoidAnother"
	case TransferTimeoutReservedForPendingTransfer:
		return "TransferTimeoutReservedForPendingTransfer"
	case TransferPendingIdMustNotBeZero:
		return "TransferPendingIdMustNotBeZero"
	case TransferPendingIdMustNotBeIntMax:
		return "TransferPendingIdMustNotBeIntMax"
	case TransferPendingIdMustBeDifferent:
		return "TransferPendingIdMustBeDifferent"
	case TransferPendingTransferNotFound:
		return "TransferPendingTransferNotFound"
	case TransferPendingTransferNotPending:
		return "TransferPendingTransferNotPending"
	case TransferPendingTransferHasDifferentDebitAccountId:
		return "TransferPendingTransferHasDifferentDebitAccountId"
	case TransferPendingTransferHasDifferentCreditAccountId:
		return "TransferPendingTransferHasDifferentCreditAccountId"
	case TransferPendingTransferHasDifferentLedger:
		return "TransferPendingTransferHasDifferentLedger"
	case TransferPendingTransferHasDifferentCode:
		return "TransferPendingTransferHasDifferentCode"
	case TransferExceedsPendingTransferAmount:
		return "TransferExceedsPendingTransferAmount"
	case TransferPendingTransferHasDifferentAmount:
		return "TransferPendingTransferHasDifferentAmount"
	case TransferPendingTransferAlreadyPosted:
		return "TransferPendingTransferAlreadyPosted"
	case TransferPendingTransferAlreadyVoided:
		return "TransferPendingTransferAlreadyVoided"
	case TransferPendingTransferExpired:
		return "TransferPendingTransferExpired"
	}
	return "CreateTransferResult(" + strconv.FormatInt(int64(i+1), 10) + ")"
}

type AccountEventResult struct {
	Index  uint32
	Result CreateAccountResult
}

type TransferEventResult struct {
	Index  uint32
	Result CreateTransferResult
}

